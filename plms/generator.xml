<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- 数据库驱动包位置 -->
	 <classPathEntry location="D:\mysql-connector-java-6.0.6.jar" />
	<!--<classPathEntry location="C:\oracle\product\10.2.0\db_1\jdbc\lib\ojdbc14.jar" />-->
	<context id="DB2Tables" targetRuntime="MyBatis3">
		<commentGenerator>
			<property name="suppressAllComments" value="true" />
		</commentGenerator>
		<!-- 数据库链接URL、用户名、密码 -->
		<!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
		<!--<jdbcConnection driverClass="com.microsoft.sqlserver.jdbc.SQLServerDriver"
			connectionURL="jdbc:sqlserver://localhost:1433;Database=mybatis" userId="xmc"
			password="xmcz3499633">-->
		<!-- <jdbcConnection driverClass="oracle.jdbc.OracleDriver"
			connectionURL="jdbc:oracle:thin:@127.0.0.1:1521:yycg"
			userId="yycg"
			password="yycg">
		</jdbcConnection> -->
		<!-- 出现提示Cannot obtain primary key information from the database, generated objects may be incomplete,只需在jdbc url后增加 nullCatalogMeansCurrent=true即可(但此时不会生成withBLOBs类)  -->
		<jdbcConnection
			driverClass="com.mysql.cj.jdbc.Driver"
			connectionURL="jdbc:mysql://localhost:3306/wpc?serverTimezone=UTC&amp;useSSL=false&amp;nullNamePatternMatchesAll=true&amp;nullCatalogMeansCurrent=true"
			userId="root"
			password="123456">
		</jdbcConnection>

		<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
			NUMERIC 类型解析为java.math.BigDecimal -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- 生成PO类模型的包名和位置 -->
		<javaModelGenerator targetPackage="com.jikuodong.plms.po" targetProject="E:\java\generator\src">
			<property name="enableSubPackages" value="true" />
			<property name="trimStrings" value="true" />
		</javaModelGenerator>
		<!-- 生成的映射文件Mapper包名和位置 -->
		<sqlMapGenerator targetPackage="com.jikuodong.plms.mapper" targetProject="E:\java\generator\src">
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>
		<!-- 生成DAO(mapper接口)的包名和位置 -->
		<javaClientGenerator type="XMLMAPPER" targetPackage="com.jikuodong.plms.mapper" targetProject="E:\java\generator\src">
			<property name="enableSubPackages" value="true" />
		</javaClientGenerator>

		<!-- 要生成那些表(更改tableName和domainObjectName就可以) -->

		<!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素,选择的table会生成以下文件：
		        1，SQL map文件
		        2，生成一个主键类；
		        3，除了BLOB和主键的其他字段的类；
		        4，包含BLOB的类；
		        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
		        6，Mapper接口（可选）

		        tableName（必要）：要生成对象的表名；
		        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
		            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
		            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
		            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
		            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
		            4，否则，使用指定的大小写格式查询；
		        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
		        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

		        可选：
		        1，schema：数据库的schema；
		        2，catalog：数据库的catalog；
		        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
		        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
		        5，enableInsert（默认true）：指定是否生成insert语句；
		        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
		        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
		        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
		        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
		        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
		        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
		        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
		        13，modelType：参考context元素的defaultModelType，相当于覆盖；
		        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
		        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

		        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
		        https://www.jianshu.com/p/e09d2370b796
		-->


		<!-- <table tableName="sysuser" ></table>
		<table tableName="userjd" ></table>
		<table tableName="usergys" ></table>
		<table tableName="usergysarea" ></table>
		<table tableName="useryy" ></table>
		<table tableName="basicinfo" ></table>
		<table tableName="dictinfo" ></table>
		<table tableName="dicttype" ></table>
		<table tableName="bss_sys_area" ></table>
		<table schema="" tableName="ypxx" >-->
			<!--指定生成字段的类型 -->
			<!--<columnOverride column="zbjg" javaType="java.lang.Float" />
		</table>-->
		<!-- <table tableName="gysypml" ></table>
		<table tableName="gysypml_control" ></table>-->
		<!--<table tableName="yycgd" ></table>
		<table tableName="yycgdmx" >
			<columnOverride column="zbjg" javaType="java.lang.Float" />
			<columnOverride column="JYJG" javaType="java.lang.Float" />
			<columnOverride column="CGL" javaType="java.lang.Float" />
			<columnOverride column="CGJE" javaType="java.lang.Float" />
		</table>-->


		<!-- <table tableName="yycgdrk" >
			<columnOverride column="rkl" javaType="java.lang.Float" />
			<columnOverride column="rkje" javaType="java.lang.Float" />
			<columnOverride column="ypyxq" javaType="java.lang.Float" />
		</table> -->

 		<!-- <table tableName="cells" ></table>
		<table tableName="customer" ></table>
		<table tableName="hosptial_info" ></table>
		<table tableName="layer_info" ></table>
		<table tableName="patient_case_info" ></table>
		<table tableName="patientinfo" ></table>
		<table tableName="photo" ></table>
		<table tableName="photo_slide" ></table>
		<table tableName="report_result" ></table>
		<table tableName="sample_info" ></table>
		<table tableName="sampletypes_info" ></table>
		<table tableName="slide_info" ></table> -->

		<!-- <table tableName="report" >
			<columnOverride column="diagDesc" javaType="java.lang.String" jdbcType="VARCHAR"/>
			<columnOverride column="microPro" javaType="java.lang.String" jdbcType="VARCHAR"/>
			<columnOverride column="dnaResult" javaType="java.lang.String" jdbcType="VARCHAR"/>
			<columnOverride column="diagnoseResult" javaType="java.lang.String" jdbcType="VARCHAR"/>
			<columnOverride column="recommendation" javaType="java.lang.String" jdbcType="VARCHAR"/>
		</table> -->

<!-- 		<table tableName="t_hospital" domainObjectName="Hospital"></table>
		<table tableName="t_hospital_expert" domainObjectName="Expert">
			<columnOverride column="CELL_CHARGE" javaType="java.lang.Double" />
			<columnOverride column="TISSUE_CHARGE" javaType="java.lang.Double" />
		</table>
		<table tableName="t_message" domainObjectName="Message"></table>
		<table tableName="t_order_detail" domainObjectName="Order">
			<columnOverride column="ORDER_CHARGE" javaType="java.lang.Double" />
		</table>
		<table tableName="t_order_valuation" domainObjectName="OrderValuation"></table>
		<table tableName="t_out_doctor" domainObjectName="OutDoctor"></table>
		<table tableName="t_patient" domainObjectName="Patient"></table>
		<table tableName="t_sys_user" domainObjectName="User"></table> -->

		<table tableName="t_pep_difficult_sharing" domainObjectName="DifficultSharing"></table>
		<table tableName="t_pep_meeting" domainObjectName="Meeting"></table>
		<table tableName="t_pep_news" domainObjectName="News"></table>


		<!--<table tableName="t_resource" domainObjectName="Resource" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" />
		<table tableName="t_role" domainObjectName="Role" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" />
		<table tableName="t_role_resource" domainObjectName="RoleResource" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" />
		<table tableName="t_user" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" />
		<table tableName="t_user_role" domainObjectName="UserRole" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" />-->
		<!--<table tableName="trole_tresource" domainObjectName="RoleResource" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" />
		<table tableName="tuser" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" />
		<table tableName="tuser_trole" domainObjectName="UserRole" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" />-->

		<!-- <table schema="" tableName="sys_user"></table>
		<table schema="" tableName="sys_role"></table>
		<table schema="" tableName="sys_permission"></table>
		<table schema="" tableName="sys_user_role"></table>
		<table schema="" tableName="sys_role_permission"></table> -->

		<!-- 有些表的字段需要指定java类型
		 <table schema="" tableName="">
			<columnOverride column="" javaType="" />
		</table> -->
	</context>
</generatorConfiguration>
